#include "ppmio.h"
#include "thresfilter.h"

pthread_mutex_t mutex;
pthread_cond_t cond;
int counter, global_sum_done;

void *work_thread(void* tParam){
	struct thread_data *myData;
	myData=(struct thread_data*) tParam;

	long me;
	int NUM_THREADS, xsize, ysize, part_start, part_length,i;
	pixel* src;
	int *sum;
	float *global_sum;
	
	NUM_THREADS = myData->started_threads;
	me = myData->threadID;
	xsize=myData->xsize;
	ysize=myData->ysize;
	src=myData->src;
	sum=myData->local_sum;
	global_sum=myData->global_sum;
	
	calc_part(&part_start,&part_length,me,NUM_THREADS,ysize);
	*sum = threshfilter_part_1(xsize,part_start, part_length,src);
	pthread_mutex_lock(&mutex);
    counter++;
    pthread_cond_broadcast(&cond);
    while(counter < NUM_THREADS){
    	pthread_cond_wait(&cond, &mutex);
    }
    if(me == 0){
    	for(
    	i=0; i<NUM_THREADS; i++){
    		float tmp = (xsize*ysize);

    		(*global_sum) = (*global_sum) + (float)(*(sum + i))/tmp;
    		printf("local_sum: %d, global_sum: %d\n", *(sum+i), *global_sum);
    	}
    	//*global_sum = (long long int)(*global_sum/(xsize*ysize));
    	global_sum_done = 1;
    	
    }
    pthread_cond_broadcast(&cond);
    while(global_sum_done != 1){
    	pthread_cond_wait(&cond, &mutex);
    }
	pthread_mutex_unlock(&mutex);
    threshfilter_part_2(xsize,part_start,part_length, src,global_sum,me);

	return NULL;
}


int main (int argc, char ** argv) {
    int xsize, ysize, colmax, NUM_THREADS,i,imagecounter;
    pixel* src;
    struct timespec stime, etime;
	char *imagename, *filename, *outfile;

    /* Take care of the arguments */
	src = malloc(MAX_PIXELS*sizeof(*src));
    if (argc != 3) {
	fprintf(stderr, "Usage: %s <number of threads> <write_image(0 or 1)>\n", argv[0]);
	exit(1);
    }
	NUM_THREADS = atoi(argv[1]);

	for(imagecounter = 0; imagecounter<4; imagecounter++){
	     switch(imagecounter){
		    case 0: 
		    imagename = "im1.ppm";
			filename = "im1blur.txt";
			outfile = "test1.ppm";
			break;
			case 1: 
			imagename = "im2.ppm";
			filename = "im2blur.txt";
			outfile = "test2.ppm";
			break;
			case 2: 
			imagename = "im3.ppm";
			filename = "im3blur.txt";
			outfile = "test3.ppm";
			break;
			case 3: 
			imagename = "im4.ppm";
			filename = "im4blur.txt";
			outfile = "test4.ppm";
			break;
		}
		int local_sum[NUM_THREADS];
		long long int global_sum = 0;
		/* read file */
		
		if(read_ppm (imagename, &xsize, &ysize, &colmax, (char *) src) != 0)
		    exit(1);
	
		if (colmax > 255) {
		fprintf(stderr, "Too large maximum color-component value\n");
		exit(1);
		}
   

		printf("Has read the image, calling filter\n");
	
		pthread_t thread_handle[NUM_THREADS];
		struct thread_data thread_data_array[NUM_THREADS];
		for(i=0; i<NUM_THREADS; i++){
			thread_data_array[i].global_sum = &global_sum;
			thread_data_array[i].xsize = xsize;
			thread_data_array[i].ysize = ysize;
			thread_data_array[i].src = src;
			thread_data_array[i].started_threads = NUM_THREADS;
			thread_data_array[i].local_sum = &(local_sum[i]);
		}
		clock_gettime(CLOCK_REALTIME, &stime);
		for(i=0; i<NUM_THREADS; i++) {
			thread_data_array[i].threadID = i;
			pthread_create(&thread_handle[i], NULL, work_thread, &(thread_data_array[i]));
		}
	
		for(i=0; i<NUM_THREADS; i++) {
			pthread_join(thread_handle[i], NULL);
		}
	
    	clock_gettime(CLOCK_REALTIME, &etime);

		printf("Filtering took: %g secs\n", (etime.tv_sec  - stime.tv_sec) +
		   1e-9*(etime.tv_nsec  - stime.tv_nsec)) ;

		/* write result */
		printf("Writing output file\n");
		if(argv[2] == 1){
			if(write_ppm (outfile, xsize, ysize, (char *)src) != 0)
		  	exit(1);
		}
		if(write_txt( filename, ((etime.tv_sec  - stime.tv_sec) +
		   1e-9*(etime.tv_nsec  - stime.tv_nsec)), NUM_THREADS ) != 0)
			  		exit(1);
	}

    return(0);
}
